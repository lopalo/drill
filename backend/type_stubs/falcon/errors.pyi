# Stubs for falcon.errors (Python 3.7)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from falcon.http_error import HTTPError, NoRepresentation, OptionalRepresentation
from typing import Any, Optional

class HTTPBadRequest(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPUnauthorized(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., challenges: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPForbidden(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPNotFound(OptionalRepresentation, HTTPError):
    def __init__(self, **kwargs: Any) -> None: ...

class HTTPMethodNotAllowed(OptionalRepresentation, HTTPError):
    headers: Any = ...
    def __init__(self, allowed_methods: Any, **kwargs: Any) -> None: ...

class HTTPNotAcceptable(HTTPError):
    def __init__(self, description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPConflict(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPGone(OptionalRepresentation, HTTPError):
    def __init__(self, **kwargs: Any) -> None: ...

class HTTPLengthRequired(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPPreconditionFailed(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPRequestEntityTooLarge(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., retry_after: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPUriTooLong(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPUnsupportedMediaType(HTTPError):
    def __init__(self, description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPRangeNotSatisfiable(NoRepresentation, HTTPError):
    def __init__(self, resource_length: Any) -> None: ...

class HTTPUnprocessableEntity(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPLocked(OptionalRepresentation, HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPFailedDependency(OptionalRepresentation, HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPPreconditionRequired(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPTooManyRequests(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., retry_after: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPRequestHeaderFieldsTooLarge(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPUnavailableForLegalReasons(OptionalRepresentation, HTTPError):
    def __init__(self, title: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPInternalServerError(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPNotImplemented(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPBadGateway(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPServiceUnavailable(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., retry_after: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPGatewayTimeout(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPVersionNotSupported(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPInsufficientStorage(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPLoopDetected(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPNetworkAuthenticationRequired(HTTPError):
    def __init__(self, title: Optional[Any] = ..., description: Optional[Any] = ..., **kwargs: Any) -> None: ...

class HTTPInvalidHeader(HTTPBadRequest):
    def __init__(self, msg: Any, header_name: Any, **kwargs: Any) -> None: ...

class HTTPMissingHeader(HTTPBadRequest):
    def __init__(self, header_name: Any, **kwargs: Any) -> None: ...

class HTTPInvalidParam(HTTPBadRequest):
    def __init__(self, msg: Any, param_name: Any, **kwargs: Any) -> None: ...

class HTTPMissingParam(HTTPBadRequest):
    def __init__(self, param_name: Any, **kwargs: Any) -> None: ...
